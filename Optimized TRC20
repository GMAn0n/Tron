// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.7.0 <0.9.0;

contract OptimizedTRC20 {
    // Mapping of token balances
    mapping (address => uint256) public balances;

    // Mapping of token allowances
    mapping (address => mapping (address => uint256)) public allowances;

    // Token details
    string public constant name = "Optimized TRC20";
    string public constant symbol = "OT20";
    uint8 public constant decimals = 18;

    // Event emitted when tokens are transferred
    event Transfer(address indexed from, address indexed to, uint256 value);

    // Event emitted when tokens are burned
    event Burn(address indexed burner, uint256 amount);

    // Event emitted when token allowance is updated
    event Approval(address indexed owner, address indexed spender, uint256 value);

    // Total supply of tokens
    uint256 public totalSupply = 1000000 * (10 ** uint256(decimals));

    // Constructor
    constructor()  {
        // Initialize token balance for the contract owner
        balances[msg.sender] = totalSupply;
    }

    // Function to transfer tokens
    function transfer(address to, uint256 value) public {
        // Check if the sender has enough tokens
        require(balances[msg.sender] >= value, "Insufficient balance");

        // Use calldata to reduce gas costs
        uint256 senderBalance = balances[msg.sender];
        senderBalance -= value;
        balances[msg.sender] = senderBalance;

        // Use uint256 explicitly
        uint256 recipientBalance = balances[to];
        recipientBalance += value;
        balances[to] = recipientBalance;

        // Only emit the event when necessary
        if (value > 0) {
            emit Transfer(msg.sender, to, value);
        }
    }

    // Function to check token balance
    function balanceOf(address owner) public view returns (uint256) {
        return balances[owner];
    }

    // Function to burn tokens
    function burn(uint256 amount) public {
        // Check if the sender has enough tokens
        require(balances[msg.sender] >= amount, "Insufficient balance");

        // Use calldata to reduce gas costs
        uint256 senderBalance = balances[msg.sender];
        senderBalance -= amount;
        balances[msg.sender] = senderBalance;

        // Reduce the total supply
        totalSupply -= amount;

        // Only emit the event when necessary
        if (amount > 0) {
            emit Burn(msg.sender, amount);
        }
    }

    // Function to transfer tokens from one address to another
    function transferFrom(address from, address to, uint256 value) public {
        // Check if the sender has enough tokens
        require(balances[from] >= value, "Insufficient balance");

        // Check if the spender has enough allowance
        require(allowances[from][msg.sender] >= value, "Insufficient allowance");

        // Use calldata to reduce gas costs
        uint256 senderBalance = balances[from];
        senderBalance -= value;
        balances[from] = senderBalance;

        // Use uint256 explicitly
        uint256 recipientBalance = balances[to];
        recipientBalance += value;
        balances[to] = recipientBalance;

        // Update the allowance
        allowances[from][msg.sender] -= value;

        // Only emit the event when necessary
        if (value > 0) {
            emit Transfer(from, to, value);
        }
    }

    // Function to set token allowance
    function approve(address spender, uint256 value) public {
        // Update the allowance
        allowances[msg.sender][spender] = value;

        // Only emit the event when necessary
        if (value > 0) {
            emit Approval(msg.sender, spender, value);
        }
    }

    // Function to check token allowance
    function allowance(address owner, address spender) public view returns (uint256) {
        return allowances[owner][spender];
    }
}
